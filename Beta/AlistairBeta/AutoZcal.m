function [xerr,yerr] = AutoZcal(daxfile,varargin)
%--------------------------------------------------------------------------
% [xerr,yerr] = AutoZcal(daxfile)
% 
% [xerr,yerr] =  AutoZcal(daxfile,'parsfile',value,...
%        'max iterations',value,'method',value,...
%        'max_uncert',value,'print2terminal',value,'verbose',value,...
%        'NewParsRoot',value);
% uses predfined parameters to compute a 3D astigmatism warping function
% for the daxfile provided.  Creates new xml or ini file in the daxfile
% folder which contains the new fit parameters.  This file is used for
% iterative refitting until the desired uncertainty bounds are met or the
% max iterations is exceeded.  
%-------------------------------------------------------------------------
% Inputs:
% bead_path / string / 'C:/data/Beads/'
%                -- location of bead data for z-calibration and chromatic
%                calibration
%--------------------------------------------------------------------------
% Outputs:
% xerr / yerr  / vector 
%               -- uncertainity for each of the 5 fit parameters. 
%  _list.bin files for zcalibration bead movie.  
%  .ini or .xml files with new z-calibration parameters
% 
%--------------------------------------------------------------------------
% Optional Inputs
% 'max iterations' / integer / 8
%               -- maximum number of iterations to try to make confidence
%                 intervals in fit obtain desired bound
% 'max uncert' / vector / [.01 .1 .2 .5 .5]
%               -- maximum uncertainty tolerated in fit parameters 
%               [w0, zr, g, A, B]
% 'print2terminal' / logical / false
%               -- should progress log from insight be printed to the
%                   matlab terminal or saved as a text file.
% 'method' / Dotfitting method / 'insight'
%               -- fitter to use (called in RunDotFinder.m)
% 'verbose' / logical / true
%               -- print fit results to matlab terminal 
% 'parsfile' / string / defaults*
%               -- parameter file to start with for fitting molecules. 
% 'NewParsRoot' / string / _zpars
%               -- will get appended to the end of the new parameter file
%               generated by this script.  
%--------------------------------------------------------------------------
%
% Alistair Boettiger
% boettiger@fas.harvard.edu
% February 3, 2013
% Copyright Creative Commons 3.0 CC BY.    
%
% Version 1.2
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Global Variables
%--------------------------------------------------------------------------
global defaultXmlFile defaultIniFile

%--------------------------------------------------------------------------
% Hardcoded Variables
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Define default parameters
%--------------------------------------------------------------------------
max_iterations = 8;
max_uncert = [.01 .1 .2 .5 .5];
print2terminal = true;
verbose = true; 
parsfile = ''; % will be assigned to default values if not given
method = 'insight'; 
%--------------------------------------------------------------------------
%% Parse mustHave variables
%--------------------------------------------------------------------------
if nargin < 1
   error([mfilename,' expects 1 inputs, folder, bead_folder and binnames']);
end


%--------------------------------------------------------------------------
%% Parse Variable Input Arguments
%--------------------------------------------------------------------------
if nargin > 1
    if (mod(length(varargin), 2) ~= 0 ),
        error(['Extra Parameters passed to the function ''' mfilename ''' must be passed in pairs.']);
    end
    parameterCount = length(varargin)/2;

    for parameterIndex = 1:parameterCount,
        parameterName = varargin{parameterIndex*2 - 1};
        parameterValue = varargin{parameterIndex*2};
        switch parameterName   
            case 'max iterations'
                max_iterations  = CheckParameter(parameterValue, 'positive', 'max iterations');
            case 'print2terminal'
                print2terminal = CheckParameter(parameterValue, 'boolean', 'print2terminal');
            case 'method'
                method = CheckParameter(parameterValue, 'string', 'method');
            case 'parsfile'
                parsfile = CheckParameter(parameterValue, 'string', 'parsfile');
            case 'max uncert'
                max_uncert = parameterValue;
                if length(max_uncert) ~= 5; 
                     error(['Not a valid option for ' parameterName]);
                end 
            case 'NewParsRoot'
                NewParsRoot = CheckParameter(parameterValue, 'string', 'NewParsRoot');
            case 'verbose'
                verbose  = CheckParameter(parameterValue, 'boolean', 'verbose');
            otherwise
                error(['The parameter ''' parameterName ''' is not recognized by the function ''' mfilename '''.' '  See help ' mfilename]);
        end
    end
end

%%

if isempty(parsfile)
    if strcmp('method','insight')
        parsfile = defaultIniFile;
    elseif strcmp('method','DaoSTORM')
        parsfile = defaultXmlFile;
    end
end
% arrays to record final uncertainty   
x_below_bnd = [0,0,0,0,0];
y_below_bnd = [0,0,0,0,0];
iters = 0;

nooverwrite  = false;
while sum([x_below_bnd,y_below_bnd]) < 10  && iters < max_iterations
    iters = iters + 1;  % cap on max iterations to converge
    disp(['iteration ',num2str(iters)]);
    if print2terminal
        RunDotFinder('daxfile',daxfile,'parsfile',parsfile,'method',method,'runinMatlab',true,'printprogress',true,'verbose',verbose);
    else
        RunDotFinder('daxfile',daxfile,'parsfile',parsfile,'method',method,'runinMatlab',true,'printprogress',false,'verbose',verbose);
    end
    % Make sure DotFinding is complete before we try to read the bin file
    % in ComputeZCalibration. Should happen for free when we 'runinMatlab'
    
    %----------------------------------------------------------------
    % run z-calibration, get updated parameter file
    %----------------------------------------------------------------
    [pars_nm, fresx2, fresy2] = ComputeZCalibration('daxfile',daxfile,'parsfile',parsfile,'nooverwrite',nooverwrite,'NewParsRoot',NewParsRoot,'verbose',verbose);
    % note, this changes the parameter file being used to the recent one. 
        nooverwrite = true; % this causes the function to save separate versions of the z-calibration output images for each iteration. 
        parsfile = pars_nm; % change parsfile to current file.  

    %------------------------------------------------------------------
    % Compute uncertainty bounds. 
    %------------------------------------------------------------------
    % Will stop when these converge to within the indicated tolerances
    c95 = confint(fresx2);
     x_uncert = abs( ( c95(2,:) - c95(1,:) ) ./ [fresx2.w0, fresx2.zr, fresx2.g fresx2.A fresx2.B]);
     x_below_bnd = x_uncert < max_uncert;
     if verbose
        disp(['x uncertainty = ',num2str(x_uncert)]);
     end
     c95 = confint(fresy2);
     y_uncert = abs( ( c95(2,:) - c95(1,:) ) ./ [fresx2.w0, fresx2.zr, fresx2.g fresx2.A fresx2.B]);
     y_below_bnd = y_uncert < max_uncert;
     if verbose
        disp(['y uncertainty = ',num2str(y_uncert)]);
     end
end % loop back and iterate with new parameter file.  


if verbose
    if iters < max_iterations || sum([x_below_bnd,y_below_bnd]) == 10 % abs(old_w0x - new_w0x) < 1
        disp('Z-calibration converged');
    else
        disp('Z-calibration did not converge ');
        disp(c95);
        disp(['fit uncertainty: x= ',num2str( x_uncert ), '   y=',num2str( y_uncert ) ]);
    end
end

xerr = x_uncert;
yerr = y_uncert;
disp('Z-calibration finished'); 