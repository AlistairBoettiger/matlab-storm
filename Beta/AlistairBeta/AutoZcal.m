function  AutoZcal(daxfile,varargin)
%--------------------------------------------------------------------------
% AutoZcal(daxfile)
% 
% AutoZcal(daxfile,'parsfile',value,...
%        'method',value,...
%        'verbose',value,...
%        'NewParsRoot',value);
% uses parameters file to compute a 3D astigmatism warping function
% for the daxfile provided.  Creates new xml or ini file in the daxfile
% folder which contains the new fit parameters. 
% Code make sure parameters file is appropriate for z-calibration: no
% molecule linking.  
%-------------------------------------------------------------------------
%% Inputs:
% bead_path / string / 'C:/data/Beads/'
%                -- location of bead data for z-calibration and chromatic
%                calibration
%--------------------------------------------------------------------------
%% Outputs (saved in same folder as daxfile):
%  _list.bin files for zcalibration bead movie.  
%  .ini or .xml files with new z-calibration parameters
%  Optional:  .png images of the calibration
%--------------------------------------------------------------------------
%% Optional Inputs
% 'method' / Dotfitting method / 'insight'
%               -- fitter to use (called in RunDotFinder.m)
% 'verbose' / logical / true
%               -- print fit results to matlab terminal 
% 'parsfile' / string / defaults*
%               -- parameter file to start with for fitting molecules. 
% 'NewParsRoot' / string / _zpars
%               -- will get appended to the end of the new parameter file
%               generated by this script.  
% 'SArounds' / integer / 80
%                   -- Total rounds of simulated annealing.  Increase for
%                   possibly better fit, decrease for speed.  
% 'SAshifts' / integer / 300
%                   -- number of shifts left and right to fit curves before
%                   temperature is dropped.  Increase this for large N. 
%                   Decrease for small N. (N= # beads in frame);
% 'SAstart' / integer [0,1] / .33
%                   -- fraction of z-range over which to shift curves at
%                   onset of simulating annealing.  If fit is really close,
%                   decrease this towards 0;  
%--------------------------------------------------------------------------
%
% Alistair Boettiger
% boettiger@fas.harvard.edu
% February 4, 2013
% Copyright Creative Commons 3.0 CC BY.    
%
% *Version 2.0*
% version 2.0 -- uses new simulated annealing of optimal curve
% version 1.2 -- integrated for STORMfinderBeta
% version 1.1 -- improved handling of convergence via confidence intervals
% version 1.0 -- uses old iterative approach to attempt to converge on
%           appropriate calibration curve. 
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Global Variables
%--------------------------------------------------------------------------
global defaultXmlFile defaultIniFile

%--------------------------------------------------------------------------
% Hardcoded Variables
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Define default parameters
%--------------------------------------------------------------------------
verbose = true; 
parsfile = ''; % will be assigned to default values if not given
method = 'insight'; 
PlotsOn = true; 
SArounds = 80;
SAshifts = 300; 
SAstart = .1;
zwindow = 100; 
runinMatlab = true;
overwrite = 2; 
printprogress = true;
ShowSA = false;
NewParsRoot = '_zfit';
%--------------------------------------------------------------------------
% Parse mustHave variables
%--------------------------------------------------------------------------
if nargin < 1
   error([mfilename,' expects at least 1 input, daxfile']);
end

%--------------------------------------------------------------------------
% Parse Variable Input Arguments
%--------------------------------------------------------------------------
if nargin > 1
    if (mod(length(varargin), 2) ~= 0 ),
        error(['Extra Parameters passed to the function ''' mfilename ''' must be passed in pairs.']);
    end
    parameterCount = length(varargin)/2;

    for parameterIndex = 1:parameterCount,
        parameterName = varargin{parameterIndex*2 - 1};
        parameterValue = varargin{parameterIndex*2};
        switch parameterName   
            case 'method'
                method = CheckParameter(parameterValue, 'string', 'method');
            case 'parsfile'
                parsfile = CheckParameter(parameterValue, 'string', 'parsfile');
            case 'runinMatlab'
                runinMatlab  = CheckParameter(parameterValue, 'boolean', 'runinMatlab');
            case 'overwrite'
                overwrite  = CheckParameter(parameterValue, 'nonnegative', 'overwrite');
            case 'printprogress'
                printprogress  = CheckParameter(parameterValue, 'boolean', 'printprogress');
            case 'NewParsRoot'
                NewParsRoot = CheckParameter(parameterValue, 'string', 'NewParsRoot');
            case 'PlotsOn'
                PlotsOn  = CheckParameter(parameterValue, 'boolean', 'PlotsOn');
            case 'zwindow'
                zwindow  = CheckParameter(parameterValue, 'positive', 'zwindow');
            case 'SArounds'
                SArounds = CheckParameter(parameterValue, 'positive', 'SArounds');
            case 'SAshifts'
                SAshifts = CheckParameter(parameterValue, 'positive', 'SAshifts');
            case 'SAstart'
                SAstart  = CheckParameter(parameterValue, 'positive', 'SAstart');
            case 'ShowSA'
                ShowSA  = CheckParameter(parameterValue, 'boolean', 'ShowSA');    
            case 'verbose'
                verbose  = CheckParameter(parameterValue, 'boolean', 'verbose');
            otherwise
                error(['The parameter ''' parameterName ''' is not recognized by the function ''' mfilename '''.' '  See help ' mfilename]);
        end
    end
end

%% Main Function Code

if isempty(parsfile)
    if strcmp(method,'insight')
        parsfile = defaultIniFile;
    elseif strcmp(method,'DaoSTORM')
        parsfile = defaultXmlFile;
    end
end

%----------------------------------------------------------------
% Check to make sure parameter file is good for z-calibration
% (Linking molecules must be turned off).  
%----------------------------------------------------------------
if strcmp(method,'insight')
    parsflag = '';
    linkmolecules ={'max displacement='};
    new_values = {'0'};
elseif strcmp(method,'DaoSTORM');
    parsflag = '<';
    linkmolecules = {
        '<radius type="float">',...
        '<drift_correction type="int">'};  % not needed, slows stuff down
    new_values = {'0';'0'};
end
k = strfind(parsfile,'.');
parstemp = [parsfile(1:k-1),'_ztemp',parsfile(k:end)];
curr_values = read_parameterfile(parsfile,linkmolecules,parsflag);
modify_script(parsfile,parstemp,linkmolecules,new_values,parsflag);


%----------------------------------------------------------------
% run z-calibration, get updated parameter file
%----------------------------------------------------------------
disp(daxfile);
disp(parstemp);
 RunDotFinder('daxfile',daxfile,'parsfile',parstemp,'method',method,...
     'runinMatlab',runinMatlab,'overwrite',overwrite,....
     'printprogress',printprogress,'hideterminal',printprogress,'verbose',verbose);

pars_nm = CompZcal(daxfile,parstemp,'PlotsOn',PlotsOn,'zwindow',zwindow,...
    'NewParsRoot',NewParsRoot,'verbose',verbose,...
    'SAstart',SAstart,'SArounds',SArounds,'SAshifts',SAshifts);
    % note, this changes the parameter file being used to the recent one. 
 

% update with previous molecule linkage option  
modify_script(pars_nm,pars_nm,linkmolecules,curr_values,parsflag);

if verbose
    disp('Z-calibration finished'); 
end